#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""Manage CPC disc summary

Maintain the disc library and convert from DSK to HFE and HFE to DSK automatically
"""

# imports
import shutil
import fnmatch
import os
import re
import subprocess
import pipes

#TODO remove wine for a windows machine
CONVERTER='wine ./bin/hxcfe.exe'

DSK_DIR='./DSK'
HFE_DIR='./HFE'

DSK_EXT='[dD][sS][kK]' #fnmatch
HFE_EXT='[hH][fF][eE]'

DSK_RPL = ('_%s.%s' % (HFE_EXT,DSK_EXT), 'DSK') #regex
HFE_RPL = ('_%s.%s' % (DSK_EXT,HFE_EXT), 'HFE')

__lut_dir = {'dsk': DSK_DIR, 'DSK': DSK_DIR, 'hfe': HFE_DIR, 'HFE': HFE_DIR}
__lut_ext = {'dsk': DSK_EXT, 'DSK': DSK_EXT, 'hfe': HFE_EXT, 'HFE': HFE_EXT}
__lut_rpl = {'dsk': DSK_RPL, 'DSK': DSK_RPL, 'hfe': HFE_RPL, 'HFE': HFE_RPL}
__lut_opposite = {'dsk': 'HFE', 'DSK': 'HFE', 'hfe': 'DSK', 'HFE': 'DSK'}
__lut_fromopt = {'dsk': 'HXC_HFE', 'DSK': 'HXC_HFE', 'hfe': 'AMSTRADCPC_DSK', 'HFE': 'AMSTRADCPC_DSK'}

def get_disc_file_list(_type):
    """Return the list of disc files for the required type of disc"""
    print 'filter', '*.%s' % __lut_ext[_type]


    matches = []
    for root, dirnames, filenames in os.walk(__lut_dir[_type]):
      for filename in fnmatch.filter(filenames, '*.%s' % __lut_ext[_type]):
          matches.append(os.path.join(root,filename))
    
    print '[%s] %d files' % (_type, len(matches))
    return sorted(matches)

def sanytize_files_name(_type=None):
    """Rename the disc file names to ease work"""

    if _type is None:
        sanytize_files_name('DSK')
        sanytize_files_name('HFE')
        return

    # Regex to find the wrong ending files
    regext = re.compile('.*.%s$' % (__lut_rpl[_type][0]))

    original = get_disc_file_list(_type)
    to_rename  = [f for f in original if re.match(regext,f)]
    
    print '[%s] %d files to rename ' % (_type, len(to_rename))
    # Rename all the wrong files
    for f in to_rename:
        assert f[-8] == '_'

        # Build the new file name
        n = f[:-8] + "." + __lut_rpl[_type][1]
        
        # And rename
        shutil.move(f,n)


    # Force upper case
    original = get_disc_file_list(_type)
    for f in original:
        if os.path.basename(f).upper() != os.path.basename(f):
            shutil.move(f, os.path.join(os.path.dirname(f), os.path.basename(f).upper()))

def opposite_filename(fname, currenttype):
    """Return the file name in the opposite file type"""
    return __lut_dir[__lut_opposite[currenttype]] + \
            fname[len(__lut_dir[currenttype]):-3] + \
            __lut_opposite[currenttype]

def get_converted_name(f, _type):
    """Returns the name generated by hxcconverter"""

    return os.path.basename(f)[:-4].replace('.','_') + \
            "_" + \
            os.path.splitext(f)[1][1:] + \
            "." + __lut_opposite[_type].lower()

def synchronize(_type=None):
    """Launch the synchronisation between the different file types"""
    if _type is None:
        synchronize('DSK')
        synchronize('HFE')
        return

    ftype = get_disc_file_list(_type)
    fopposite = get_disc_file_list(__lut_opposite[_type])

    for f in ftype:
        if opposite_filename(f, _type) not in fopposite:
            print "create:", f, "=>", opposite_filename(f, _type) 
            subprocess.call([CONVERTER +" -finput:" + pipes.quote(f) +" -conv:"+ __lut_fromopt[_type] + " > /dev/null"], shell=True )
            shutil.move(get_converted_name(f, _type), opposite_filename(f, _type))
# code
if __name__ == '__main__':
    sanytize_files_name()
    synchronize()


# metadata
__author__ = 'Krusty'
__copyright__ = 'Copyright 2013, Benediction'
__credits__ = ['Krusty']
__licence__ = 'GPL'
__version__ = '0.1'
__maintainer__ = 'Krusty'
__email__ = 'krusty@cpcscene.com'
__status__ = 'Prototype'

